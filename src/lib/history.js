/**
 * @fileoverview Proxy for HTML5 window history functions for browsers that
 * do not support it.
 */

goog.provide('treesaver.history');

goog.require('treesaver.capabilities');
goog.require('treesaver.debug');
goog.require('treesaver.scheduler');
goog.require('treesaver.storage');

// Don't do anything when in an app wrapper
if (WITHIN_IOS_WRAPPER) {
  /**
   * Dummy function
   *
   * @param {!Object} data
   * @param {!string} title
   * @param {!string} url
  */
  treesaver.history.pushState = function(data, title, url) {
  };

  /**
   * Dummy function
   *
   * @param {!Object} data
   * @param {!string} title
   * @param {!string} url
   */
  treesaver.history.replaceState = function(data, title, url) {
  };
}
else {
  /**
   * Milliseconds between checks for hash changes on browsers that don't
   * support onhashchange
   *
   * @const
   * @type {number}
  */
  treesaver.history.HASH_INTERVAL = 100;

  /**
   * Hash prefix used to mark a hash generated by this library
   *
   * @const
   * @type {string}
   */
  treesaver.history.DELIMITER = '-';

  /**
   * Does the browser have a native implementation of the history functions
   * @const
   * @private
   * @type {boolean}
   */
  treesaver.history.NATIVE_SUPPORT = 'pushState' in window.history;

  /**
   * Return the value of the current document hash, minus any leading '#'
   * @private
   * @return {string} The normalized hash value.
   */
  treesaver.history.getNormalizedHash_ = function() {
    // IE7 does funky things with the location.hash property when the URL contains a
    // query string. Firefox 3.5 has quirks around escaping hash values ( hat tip: blixt
    // https://github.com/blixt/js-hash/ )
    //
    // Therefore, use location.href instead of location.hash, as blixt did (MIT license)
    var index = document.location.href.indexOf('#');
    return index === -1 ? '' : document.location.href.substr(index + 1);
  };

  // Even if the client has a native implementation of the API, we have to check
  // the hash on load just in case the visitor followed a link generated by a
  // browser that does not have native support
  if (document.location.hash) {
    var current_hash = treesaver.history.getNormalizedHash_();

    // Our hashes always start with the delimiter and have at least another
    // character there
    if (current_hash.charAt(0) === treesaver.history.DELIMITER &&
        current_hash.length >= 2) {
      // Redirect, stripping the intial delimiter
      // Use location.replace instead of setting document.location to avoid
      // breaking the back button
      document.location.replace(current_hash.substr(1));
    }
  }

  // Forward to native
  treesaver.history.pushState = function(data, title, url) {
    window.history['pushState'](data, title, url);
  };

  // Forward to native
  treesaver.history.replaceState = function(data, title, url) {
    window.history['replaceState'](data, title, url);
  };

  // History helper functions only needed for browsers that don't
  // have native support
  if (!treesaver.history.NATIVE_SUPPORT) {
    treesaver.debug.info('Using non-native history implementation');

    // Override functions for browsers with non-native support
    treesaver.history.pushState = function(data, title, url) {
      treesaver.history._changeState(data, title, url, false);
    };
    treesaver.history.replaceState = function(data, title, url) {
      treesaver.history._changeState(data, title, url, true);
    };

    /**
     * Create a hash for a given URL
     *
     * @private
     * @param {!string} url
     * @return {string} String that can be safely used as hash.
     */
    treesaver.history.createHash_ = function(url) {
      // Always add delimiter and escape the URL
      return treesaver.history.DELIMITER + window.escape(url);
    };

    /**
     * Set the browser hash. Necessary in order to override behavior when
     * using IFrame for IE7
     *
     * @private
     * @param {!string} hash
     */
    treesaver.history.setLocationHash_ = function(hash) {
      document.location.hash = '#' + hash;
    };

    /**
     * Set the browser hash without adding a history entry
     *
     * @private
     * @param {!string} hash
     */
    treesaver.history.replaceLocationHash_ = function(hash) {
      document.location.replace('#' + hash);
    };

    /**
     * Storage prefix for history items
     *
     * @const
     * @private
     * @type {string}
     */
    treesaver.history.STORAGE_PREFIX = 'history:';

    /**
     * Create key name for storing history data
     *
     * @private
     * @param {!string} key
     * @return {string} String that can be safely used as storage key.
     */
    treesaver.history.createStorageKey_ = function(key) {
      return treesaver.history.STORAGE_PREFIX + key;
    };

    /**
     * @private
     * @param {?Object} data
     * @param {?string} title
     * @param {!string} url
     * @param {boolean} replace
     */
    treesaver.history._changeState = function _changeState(data, title, url, replace) {
      var hash_url = treesaver.history.createHash_(url);

      // Store data using url
      treesaver.storage.set(
        treesaver.history.createStorageKey_(hash_url),
        { state: data, title: title }
      );

      // If we're using the same URL as the current page, don't double up
      if (url === document.location.pathname) {
        hash_url = '';
      }

      // HTML5 implementation only calls popstate as a result of a user action,
      // store the hash so we don't trigger a false event
      treesaver.history.hash_ = hash_url;

      // Use the URL as a hash
      if (replace) {
        treesaver.history.replaceLocationHash_(hash_url);
      }
      else {
        treesaver.history.setLocationHash_(hash_url);
      }
    };

    /**
     * Receive the hashChanged event (native or manual) and fire the onpopstate
     * event
     * @private
     */
    treesaver.history.hashChange_ = function hashChange_() {
      var new_hash = treesaver.history.getNormalizedHash_(),
          data;

      // False alarm, ignore
      if (new_hash === treesaver.history.hash_) {
        return;
      }

      treesaver.history.hash_ = new_hash;
      data = treesaver.history.hash_ ?
        treesaver.storage.get(treesaver.history.createStorageKey_(new_hash)) :
        {};

      treesaver.debug.info('New hash: ' + treesaver.history.hash_);

      // Now, fire onpopstate with the state object
      if ('onpopstate' in window &&
          typeof window['onpopstate'] === 'function') {
        window['onpopstate'].apply(window, [{ 'state': data ? data.state : null }]);
      }
      else {
        treesaver.debug.info('State changed, but no handler!');
      }
    };

    /**
     * @return {boolean} True if the hash has changed
     */
    treesaver.history.hasHashChanged_ = function() {
      return treesaver.history.getNormalizedHash_() !== treesaver.history.hash_;
    };

    // IE8 in IE7 mode defines onhashchange, but never fires it
    if ('onhashchange' in window && !treesaver.capabilities.IS_IE8INIE7) {
      treesaver.debug.info('Browser has native onHashChange');

      window['onhashchange'] = treesaver.history.hashChange_;
    }
    else {
      treesaver.debug.info('Using manual hash change detection');

      // Need to check hash state manually
      treesaver.scheduler.repeat(function() {
        if (treesaver.history.hasHashChanged_()) {
          treesaver.history.hashChange_();
        }
      }, treesaver.history.HASH_INTERVAL, Infinity);

      // IE6 & 7 don't create history items if the hash doesn't match an
      // element's ID so we need to create an iframe which we'll use
      if (SUPPORT_IE && treesaver.capabilities.BROWSER_NAME === 'msie') {
        treesaver.debug.info('Using iFrame history for IE7');

        /**
         * iFrame used for supporting the back button in IE7
         * @private
         * @type {Element}
         */
        treesaver.history.dummyIFrame_ = document.createElement('iframe');

        // Add the iFrame to the document
        document.documentElement.appendChild(treesaver.history.dummyIFrame_);

        // Redefine the hasHashChanged_ function to ensure check the iFrame
        // contents
        treesaver.history.hasHashChanged_ = function() {
          var hash = treesaver.history.dummyIFrame_.contentWindow.document.body.innerHTML;

          if (hash !== treesaver.history.hash_) {
            // Set the hash in case a user copies and pastes or shares the URL
            document.location.hash = '#' + (hash || '');
            return true;
          }
        };

        // Redefine replaceLocationHash_ to change contents of dummy iframe w/o history
        // entry
        treesaver.history.replaceLocationHash_ = function(hash) {
          var iDoc = treesaver.history.dummyIFrame_.contentWindow.document;
          if (hash !== iDoc.body.innerHTML) {
            iDoc.body.innerHTML = hash;
          }
          document.location.replace('#' + hash);
        }

        // Redefine setLocationHash_ to change the contents of the dummy iframe
        // and create a new history entry
        treesaver.history.setLocationHash_ = function(hash) {
          var iDoc = treesaver.history.dummyIFrame_.contentWindow.document;
          iDoc.open();
          iDoc.write('<html><body>' + hash + '</body></html>');
          iDoc.close();
          document.location.hash = '#' + hash;
        };
      }
    }
  }
}
